import { UserRepository } from '../repos/userRepo';
import { EncryptionService } from './encryptionService';

export class InvitationService {
  private userRepo: UserRepository;
  private encryptionService: EncryptionService;

  constructor() {
    this.userRepo = new UserRepository();
    this.encryptionService = new EncryptionService();
  }

  // generate invitation code for partner registration
  async generateInvitationCode(adminId: string): Promise<string> {
    try {
      // create unique invitation code
      const invitationCode = `INV-${Date.now()}-${this.encryptionService.generateSecureToken(6)}`;
      
      // store invitation code with admin who created it
      await this.userRepo.createInvitationCode({
        invitationCode,
        createdBy: adminId,
        isUsed: false,
        createdAt: new Date()
      });

      console.log(`Invitation code generated by admin ${adminId}: ${invitationCode}`);
      return invitationCode;
    } catch (error) {
      console.error('Failed to generate invitation code:', error);
      throw new Error('Failed to generate invitation code');
    }
  }

  // validate invitation code during partner registration
  async validateInvitationCode(invitationCode: string): Promise<{ valid: boolean; createdBy?: string }> {
    try {
      const invitation = await this.userRepo.findInvitationCode(invitationCode);
      
      if (!invitation) {
        return { valid: false };
      }

      if (invitation.isUsed) {
        return { valid: false };
      }

      // check if invitation is not expired (optional - 30 days validity)
      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
      
      if (invitation.createdAt < thirtyDaysAgo) {
        return { valid: false };
      }

      return { valid: true, createdBy: invitation.createdBy };
    } catch (error) {
      console.error('Failed to validate invitation code:', error);
      return { valid: false };
    }
  }

  // mark invitation code as used after successful registration
  async markInvitationAsUsed(invitationCode: string, usedBy: string): Promise<boolean> {
    try {
      const result = await this.userRepo.markInvitationAsUsed(invitationCode, usedBy);
      return result;
    } catch (error) {
      console.error('Failed to mark invitation as used:', error);
      return false;
    }
  }

  // get all invitation codes created by admin
  async getInvitationsByAdmin(adminId: string): Promise<any[]> {
    try {
      return await this.userRepo.getInvitationsByAdmin(adminId);
    } catch (error) {
      console.error('Failed to get invitations by admin:', error);
      return [];
    }
  }
}